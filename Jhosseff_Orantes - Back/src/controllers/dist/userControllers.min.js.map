{"version":3,"sources":["userControllers.js"],"names":["pool","require","exports","crearUsuario","req","res","_req$body","nombre","fecha","telefono","correo","EstadoUsuarioId","_ref","_ref2","result","regeneratorRuntime","async","_context","prev","next","body","awrap","query","sent","_slicedToArray","status","json","id","insertId","mensaje","t0","error","concat","message","stop","obtenerUsuarios","_ref3","_ref4","rows","_context2","obtenerUsuarioPorId","_ref5","_ref6","_context3","params","abrupt","_req$body2","_ref7","_ref8","_context4","affectedRows","eliminarUsuario","_ref9","_ref10","_context5"],"mappings":"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","file":"userControllers.min.js","sourcesContent":["const pool = require(\"../config/db\");\r\n\r\n// Crear un usuario\r\nexports.crearUsuario = async (req, res) => {\r\n  const { nombre, fecha, telefono, correo, EstadoUsuarioId } = req.body;\r\n  try {\r\n    const sql = \"INSERT INTO usuario (nombre, fecha, telefono, correo, EstadoUsuarioId) VALUES (?, ?, ?, ?, ?)\";\r\n    const [result] = await pool.query(sql, [nombre, fecha, telefono, correo, EstadoUsuarioId]);\r\n    res.status(201).json({ id: result.insertId, mensaje: \"Usuario creado exitosamente\" });\r\n  } catch (error) {\r\n    res.status(500).json({ error: `Error al crear usuario: ${error.message}` });\r\n  }\r\n};\r\n\r\n// Obtener todos los usuarios\r\nexports.obtenerUsuarios = async (req, res) => {\r\n  try {\r\n    const sql = \"SELECT * FROM usuario\";\r\n    const [rows] = await pool.query(sql);\r\n    res.status(200).json(rows);\r\n  } catch (error) {\r\n    res.status(500).json({ error: `Error al obtener usuarios: ${error.message}` });\r\n  }\r\n};\r\n\r\n// Obtener un usuario por ID\r\nexports.obtenerUsuarioPorId = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const sql = \"SELECT * FROM usuario WHERE id = ?\";\r\n    const [rows] = await pool.query(sql, [id]);\r\n    if (rows.length === 0) {\r\n      return res.status(404).json({ error: \"Usuario no encontrado\" });\r\n    }\r\n    res.status(200).json(rows[0]);\r\n  } catch (error) {\r\n    res.status(500).json({ error: `Error al obtener usuario: ${error.message}` });\r\n  }\r\n};\r\n\r\n// Actualizar un usuario\r\nexports.actualizarUsuario = async (req, res) => {\r\n  const { id } = req.params;\r\n  const { nombre, fecha, telefono, correo, EstadoUsuarioId } = req.body;\r\n  try {\r\n    const sql = \"UPDATE usuario SET nombre = ?, fecha = ?, telefono = ?, correo = ?, EstadoUsuarioId = ? WHERE id = ?\";\r\n    const [result] = await pool.query(sql, [nombre, fecha, telefono, correo, EstadoUsuarioId, id]);\r\n    if (result.affectedRows === 0) {\r\n      return res.status(404).json({ error: \"Usuario no encontrado\" });\r\n    }\r\n    res.status(200).json({ mensaje: \"Usuario actualizado exitosamente\" });\r\n  } catch (error) {\r\n    res.status(500).json({ error: `Error al actualizar usuario: ${error.message}` });\r\n  }\r\n};\r\n\r\n// Eliminar un usuario\r\nexports.eliminarUsuario = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const sql = \"DELETE FROM usuario WHERE id = ?\";\r\n    const [result] = await pool.query(sql, [id]);\r\n    if (result.affectedRows === 0) {\r\n      return res.status(404).json({ error: \"Usuario no encontrado\" });\r\n    }\r\n    res.status(200).json({ mensaje: \"Usuario eliminado exitosamente\" });\r\n  } catch (error) {\r\n    res.status(500).json({ error: `Error al eliminar usuario: ${error.message}` });\r\n  }\r\n};\r\n"]}