{"version":3,"sources":["userControllers.js"],"names":["pool","require","exports","crearUsuario","req","res","body","nombre","fecha","telefono","correo","EstadoUsuarioId","sql","query","result","status","json","id","insertId","mensaje","error","message","obtenerUsuarios","rows","obtenerUsuarioPorId","params","length","actualizarUsuario","affectedRows","eliminarUsuario"],"mappings":"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","sourcesContent":["const pool = require(\"../config/db\");\r\n\r\n// Crear un usuario\r\nexports.crearUsuario = async (req, res) => {\r\n  const { nombre, fecha, telefono, correo, EstadoUsuarioId } = req.body;\r\n  try {\r\n    const sql = \"INSERT INTO usuario (nombre, fecha, telefono, correo, EstadoUsuarioId) VALUES (?, ?, ?, ?, ?)\";\r\n    const [result] = await pool.query(sql, [nombre, fecha, telefono, correo, EstadoUsuarioId]);\r\n    res.status(201).json({ id: result.insertId, mensaje: \"Usuario creado exitosamente\" });\r\n  } catch (error) {\r\n    res.status(500).json({ error: `Error al crear usuario: ${error.message}` });\r\n  }\r\n};\r\n\r\n// Obtener todos los usuarios\r\nexports.obtenerUsuarios = async (req, res) => {\r\n  try {\r\n    const sql = \"SELECT * FROM usuario\";\r\n    const [rows] = await pool.query(sql);\r\n    res.status(200).json(rows);\r\n  } catch (error) {\r\n    res.status(500).json({ error: `Error al obtener usuarios: ${error.message}` });\r\n  }\r\n};\r\n\r\n// Obtener un usuario por ID\r\nexports.obtenerUsuarioPorId = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const sql = \"SELECT * FROM usuario WHERE id = ?\";\r\n    const [rows] = await pool.query(sql, [id]);\r\n    if (rows.length === 0) {\r\n      return res.status(404).json({ error: \"Usuario no encontrado\" });\r\n    }\r\n    res.status(200).json(rows[0]);\r\n  } catch (error) {\r\n    res.status(500).json({ error: `Error al obtener usuario: ${error.message}` });\r\n  }\r\n};\r\n\r\n// Actualizar un usuario\r\nexports.actualizarUsuario = async (req, res) => {\r\n  const { id } = req.params;\r\n  const { nombre, fecha, telefono, correo, EstadoUsuarioId } = req.body;\r\n  try {\r\n    const sql = \"UPDATE usuario SET nombre = ?, fecha = ?, telefono = ?, correo = ?, EstadoUsuarioId = ? WHERE id = ?\";\r\n    const [result] = await pool.query(sql, [nombre, fecha, telefono, correo, EstadoUsuarioId, id]);\r\n    if (result.affectedRows === 0) {\r\n      return res.status(404).json({ error: \"Usuario no encontrado\" });\r\n    }\r\n    res.status(200).json({ mensaje: \"Usuario actualizado exitosamente\" });\r\n  } catch (error) {\r\n    res.status(500).json({ error: `Error al actualizar usuario: ${error.message}` });\r\n  }\r\n};\r\n\r\n// Eliminar un usuario\r\nexports.eliminarUsuario = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const sql = \"DELETE FROM usuario WHERE id = ?\";\r\n    const [result] = await pool.query(sql, [id]);\r\n    if (result.affectedRows === 0) {\r\n      return res.status(404).json({ error: \"Usuario no encontrado\" });\r\n    }\r\n    res.status(200).json({ mensaje: \"Usuario eliminado exitosamente\" });\r\n  } catch (error) {\r\n    res.status(500).json({ error: `Error al eliminar usuario: ${error.message}` });\r\n  }\r\n};\r\n"],"file":"userControllers.dev.js"}